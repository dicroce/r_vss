include(TestBigEndian)

# Global Config

set(CMAKE_CXX_STANDARD 17)

if(IS_BIG_ENDIAN)
    add_compile_definitions(IS_BIG_ENDIAN)
else()
    add_compile_definitions(IS_LITTLE_ENDIAN)
endif()

if(NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE Debug)
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    add_compile_definitions(IS_WINDOWS)
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    add_compile_definitions(IS_LINUX)
    add_compile_options(
        "-fno-omit-frame-pointer"
        "$<$<CONFIG:DEBUG>:-O0;-g3;-ggdb3;-fasynchronous-unwind-tables>"
    )
endif()

set(CMAKE_PREFIX_PATH "/usr/local" CACHE STRING "Default prefix path for find_package")

# ---- Common CPack Settings ----
set(CPACK_PACKAGE_VENDOR "Tony Di Croce")
set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})
set(CPACK_OUTPUT_FILE_PREFIX ${CMAKE_CURRENT_BINARY_DIR})
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
set(CPACK_COMPONENTS_GROUPING ALL_COMPONENTS_IN_ONE)

# ---- Windows-specific CPack Settings ----
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set(CPACK_GENERATOR "NSIS")
    set(CPACK_NSIS_DISPLAY_NAME "${CMAKE_PROJECT_NAME} Dev Package")
    set(CPACK_NSIS_PACKAGE_NAME "${CMAKE_PROJECT_NAME}")
    set(CPACK_NSIS_CONTACT "dicroce@gmail.com")
    set(CPACK_PACKAGE_INSTALL_DIRECTORY "${CMAKE_PROJECT_NAME}")
    set(CPACK_PACKAGE_EXECUTABLES "your_executable" "YourApp")
    set(CPACK_NSIS_MODIFY_PATH ON) # Adds to user PATH

    include(CPack)
endif()

# ---- Linux-specific CPack Settings ----
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    set(CPACK_GENERATOR "DEB")
    set(CPACK_SET_DESTDIR TRUE)
    set(CPACK_DEBIAN_PACKAGE_MAINTAINER "dicroce@gmail.com")
    set(CPACK_PACKAGE_CONTACT "dicroce@gmail.com")
    set(CPACK_DEBIAN_PACKAGE_DEPENDS "")
    set(CPACK_VERBATIM_VARIABLES YES)
    set(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PACKAGE_NAME})
    set(CPACK_PACKAGING_INSTALL_PREFIX "/usr/local")
    set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)
    set(CPACK_DEB_COMPONENT_INSTALL YES)
    set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)

    include(CPack)
    include(GNUInstallDirs)
endif()


include(GNUInstallDirs)

function(configure_dev_package package_name package_summary)
    set(
        CPACK_PACKAGE_NAME "${package_name}"
        CACHE STRING "${package_name}"
    )
    set(
        CPACK_PACKAGE_DESCRIPTION_SUMMARY "${package_summary}"
        CACHE STRING "${package_summary}"
    )

    install(
        DIRECTORY include/${package_name}
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
        FILES_MATCHING PATTERN "*.h" PATTERN "*.hpp"
    )

    install(
        TARGETS ${package_name}
        EXPORT ${package_name}Targets
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    )

    include(CMakePackageConfigHelpers)

    write_basic_package_version_file(
        "${CMAKE_CURRENT_BINARY_DIR}/${package_name}ConfigVersion.cmake"
        VERSION ${PROJECT_VERSION}
        COMPATIBILITY SameMajorVersion
    )

    configure_package_config_file(
        "${CMAKE_CURRENT_SOURCE_DIR}/cmake/${package_name}Config.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/${package_name}Config.cmake"
        INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${package_name}
    )

    install(
        FILES
            "${CMAKE_CURRENT_BINARY_DIR}/${package_name}Config.cmake"
            "${CMAKE_CURRENT_BINARY_DIR}/${package_name}ConfigVersion.cmake"
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${package_name}
    )

    install(
        EXPORT ${package_name}Targets
        FILE ${package_name}Targets.cmake
        NAMESPACE ${package_name}::
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${package_name}
    )
endfunction()
